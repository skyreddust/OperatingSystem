1.【非抢占式】先来先服务（FCFS）调度算法
周转时间 = 完成时刻 - 到达时刻
带权周转时间 = 周转时间 / 运行时间
等待时间 = 周转时间 – 运行时间
平均周转时间
平均带权周转时间
平均等待时间

2.【非抢占式】短进程优先（SPF）调度算法：每次调度时选择当前已到达且运行时间最短的进程

3.【抢占式】最短剩余时间（SRTN）优先算法
当有进程加入就绪队列时：需要调度，如果新到达的进程剩余时间比当前运行的进程剩余时间更短，则由新进程抢占处理机，当前运行进程重新回到就绪队列
当一个进程完成时：需要调度，在就绪队列中选择剩余时间最短的进程运行

4.【非抢占式】高响应比优先（HRRN）调度算法
响应比 = (等待时间 + 要求服务时间) / 要求服务时间
调度时计算所有就绪进程的响应比，选响应比最高的进程上处理机

5.【抢占式】时间片轮转（RR）调度算法
按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（由时钟装置发出时钟中断来通知 CPU 时间片已到）
若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列队尾重新排队
进程运行完会主动放弃处理机，此时也需要按上述两条规则进行调度

6.【非抢占式】优先级调度算法
每次调度时选择当前已到达且优先级最高的进程
当前进程主动放弃处理机时发生调度

7.【抢占式】优先级调度算法
每次调度时选择当前已到达且优先级最高的进程
当前进程主动放弃处理机时发生调度
当就绪队列发生改变时也需要检查是会发生抢占

静态优先级：创建进程时确定，之后一直不变
动态优先级：创建进程时有一个初始值，之后会根据情况动态地调整优先级
  如果某进程在就绪队列中等待了很长时间，则可以适当提升其优先
  如果某进程占用处理机运行了很长时间，则可适当降低其优先级
  如果发现一个进程频繁地进行 I/O 操作，则可适当提升其优先级

8.【抢占式】多级反馈队列调度算法
设置多级就绪队列，各级队列优先级从高到低，时间片从小到大
新进程到达时先进入第 1 级队列，按 FCFS 原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队列队尾（如果此时已经是在最下级的队列，则重新放回该队列队尾）
只有第 k 级队列为空时，才会为 k+1 级队头的进程分配时间片
被抢占处理机的进程重新放回原队列队尾

参考链接：
https://blog.csdn.net/baidu_39514357/article/details/132449723
